name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup Go workspace
        run: |
          echo "GOPATH=${GITHUB_WORKSPACE}/go" >> $GITHUB_ENV
          echo "GOBIN=${GITHUB_WORKSPACE}/go/bin" >> $GITHUB_ENV
          echo "${GITHUB_WORKSPACE}/go/bin" >> $GITHUB_PATH

      # Split out the go mod tidy into its own step
      - name: Update go.mod
        run: |
          go mod tidy
          cat go.mod

      - name: Download dependencies
        run: go mod download

      - name: List workspace
        run: |
          pwd
          ls -la
          echo "GOPATH=$GOPATH"
          go env

      - name: Run tests
        run: go test -v ./...

      - name: Generate coverage report
        run: go test -coverprofile=coverage.out ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Build binary
        run: |
          go mod tidy
          go build -o ipam

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ipam
          asset_name: ipam
          asset_content_type: application/octet-stream